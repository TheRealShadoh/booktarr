name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # SonarCloud Analysis
  sonarcloud:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Run tests with coverage
      run: |
        cd frontend && npm run test -- --coverage --watchAll=false
        cd ../backend && python -m pytest tests/ --cov=services --cov=routes --cov=auth --cov=clients --cov-report=xml
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Dependency Check
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run OWASP Dependency Check (Backend)
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'booktarr-backend'
        path: './backend'
        format: 'ALL'
        out: 'dependency-check-backend'
    
    - name: Upload Dependency Check Results (Backend)
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-backend
        path: dependency-check-backend
    
    - name: Set up Node.js for frontend audit
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: NPM Audit (Frontend)
      working-directory: ./frontend
      run: |
        npm audit --audit-level moderate
        npm audit --format json > npm-audit-report.json
      continue-on-error: true
    
    - name: Upload NPM Audit Results
      uses: actions/upload-artifact@v3
      with:
        name: npm-audit-report
        path: frontend/npm-audit-report.json

  # License Check
  license-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install license checker
      run: npm install -g license-checker
    
    - name: Check frontend licenses
      working-directory: ./frontend
      run: |
        npm ci
        license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC" --summary
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check backend licenses
      working-directory: ./backend
      run: |
        pip install pip-licenses
        pip install -r requirements.txt
        pip-licenses --with-authors --format=json --output-file=licenses.json
        pip-licenses --allow-only="MIT;Apache Software License;BSD License;ISC License (ISCL)" --summary
    
    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          backend/licenses.json

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt
        pip install locust
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        DATABASE_URL: sqlite:///./test.db
    
    - name: Run Lighthouse CI
      working-directory: ./frontend
      run: |
        npm install -g @lhci/cli
        npm start &
        sleep 15
        lhci autorun --collect.url=http://localhost:3000 --upload.target=temporary-public-storage
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    
    - name: Run backend performance tests
      working-directory: ./backend
      run: |
        echo "
        from locust import HttpUser, task, between
        
        class BookTarrUser(HttpUser):
            wait_time = between(1, 3)
            
            @task
            def health_check(self):
                self.client.get('/api/health')
            
            @task(3)
            def get_books(self):
                self.client.get('/api/books')
            
            @task(2)
            def get_series(self):
                self.client.get('/api/series')
        " > locustfile.py
        
        locust --host=http://localhost:8000 --users=10 --spawn-rate=2 --run-time=30s --headless --html=performance-report.html

    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          backend/performance-report.html

  # Code Coverage Analysis
  coverage-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt
        pip install pytest-cov coverage[toml]
    
    - name: Run frontend tests with coverage
      working-directory: ./frontend
      run: npm run test -- --coverage --watchAll=false --ci
    
    - name: Run backend tests with coverage
      working-directory: ./backend
      run: |
        python -m pytest tests/ \
          --cov=services \
          --cov=routes \
          --cov=auth \
          --cov=clients \
          --cov-report=html \
          --cov-report=json
    
    - name: Coverage Comment
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request'
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 70
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          frontend/coverage/
          backend/htmlcov/
          backend/coverage.json